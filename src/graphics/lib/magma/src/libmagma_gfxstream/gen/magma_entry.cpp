// Generated Code - DO NOT EDIT !!
// generated by 'emugen'
#include <stdio.h>
#include <stdlib.h>
#include "magma_client_context.h"

extern "C" {
	magma_status_t magma_device_import(magma_handle_t device_channel, magma_device_t* device_out);
	void magma_device_release(magma_device_t device);
	magma_status_t magma_query(magma_device_t device, uint64_t id, magma_handle_t* result_buffer_out, uint64_t* value_out);
	magma_status_t magma_create_connection2(magma_device_t device, magma_connection_t* connection_out);
	void magma_release_connection(magma_connection_t connection);
	magma_status_t magma_create_buffer(magma_connection_t connection, uint64_t size, uint64_t* size_out, magma_buffer_t* buffer_out);
	void magma_release_buffer(magma_connection_t connection, magma_buffer_t buffer);
	uint64_t magma_get_buffer_id(magma_buffer_t buffer);
	uint64_t magma_get_buffer_size(magma_buffer_t buffer);
	magma_status_t magma_get_buffer_handle2(magma_buffer_t buffer, magma_handle_t* handle_out);
	magma_status_t magma_create_semaphore(magma_connection_t connection, magma_semaphore_t* semaphore_out);
	void magma_release_semaphore(magma_connection_t connection, magma_semaphore_t semaphore);
	uint64_t magma_get_semaphore_id(magma_semaphore_t semaphore);
	void magma_signal_semaphore(magma_semaphore_t semaphore);
	void magma_reset_semaphore(magma_semaphore_t semaphore);
	magma_status_t magma_poll(magma_poll_item_t* items, uint32_t count, uint64_t timeout_ns);
	magma_status_t magma_get_error(magma_connection_t connection);
	magma_status_t magma_create_context(magma_connection_t connection, uint32_t* context_id_out);
	void magma_release_context(magma_connection_t connection, uint32_t context_id);
	magma_status_t magma_map_buffer_gpu(magma_connection_t connection, magma_buffer_t buffer, uint64_t page_offset, uint64_t page_count, uint64_t gpu_va, uint64_t map_flags);
	void magma_unmap_buffer_gpu(magma_connection_t connection, magma_buffer_t buffer, uint64_t gpu_va);
	magma_status_t magma_execute_command(magma_connection_t connection, uint32_t context_id, magma_command_descriptor* descriptor);
	magma_handle_t magma_get_notification_channel_handle(magma_connection_t connection);
	magma_status_t magma_read_notification_channel2(magma_connection_t connection, void* buffer, uint64_t buffer_size, uint64_t* buffer_size_out, magma_bool_t* more_data_out);
};

#ifndef GET_CONTEXT
static magma_client_context_t::CONTEXT_ACCESSOR_TYPE *getCurrentContext = NULL;
void magma_client_context_t::setContextAccessor(CONTEXT_ACCESSOR_TYPE *f) { getCurrentContext = f; }
#define GET_CONTEXT magma_client_context_t * ctx = getCurrentContext()
#endif

magma_status_t magma_device_import(magma_handle_t device_channel, magma_device_t* device_out)
{
	GET_CONTEXT;
	return ctx->magma_device_import(ctx, device_channel, device_out);
}

void magma_device_release(magma_device_t device)
{
	GET_CONTEXT;
	ctx->magma_device_release(ctx, device);
}

magma_status_t magma_query(magma_device_t device, uint64_t id, magma_handle_t* result_buffer_out, uint64_t* value_out)
{
	GET_CONTEXT;
	return ctx->magma_query(ctx, device, id, result_buffer_out, value_out);
}

magma_status_t magma_create_connection2(magma_device_t device, magma_connection_t* connection_out)
{
	GET_CONTEXT;
	return ctx->magma_create_connection2(ctx, device, connection_out);
}

void magma_release_connection(magma_connection_t connection)
{
	GET_CONTEXT;
	ctx->magma_release_connection(ctx, connection);
}

magma_status_t magma_create_buffer(magma_connection_t connection, uint64_t size, uint64_t* size_out, magma_buffer_t* buffer_out)
{
	GET_CONTEXT;
	return ctx->magma_create_buffer(ctx, connection, size, size_out, buffer_out);
}

void magma_release_buffer(magma_connection_t connection, magma_buffer_t buffer)
{
	GET_CONTEXT;
	ctx->magma_release_buffer(ctx, connection, buffer);
}

uint64_t magma_get_buffer_id(magma_buffer_t buffer)
{
	GET_CONTEXT;
	return ctx->magma_get_buffer_id(ctx, buffer);
}

uint64_t magma_get_buffer_size(magma_buffer_t buffer)
{
	GET_CONTEXT;
	return ctx->magma_get_buffer_size(ctx, buffer);
}

magma_status_t magma_get_buffer_handle2(magma_buffer_t buffer, magma_handle_t* handle_out)
{
	GET_CONTEXT;
	return ctx->magma_get_buffer_handle2(ctx, buffer, handle_out);
}

magma_status_t magma_create_semaphore(magma_connection_t connection, magma_semaphore_t* semaphore_out)
{
	GET_CONTEXT;
	return ctx->magma_create_semaphore(ctx, connection, semaphore_out);
}

void magma_release_semaphore(magma_connection_t connection, magma_semaphore_t semaphore)
{
	GET_CONTEXT;
	ctx->magma_release_semaphore(ctx, connection, semaphore);
}

uint64_t magma_get_semaphore_id(magma_semaphore_t semaphore)
{
	GET_CONTEXT;
	return ctx->magma_get_semaphore_id(ctx, semaphore);
}

void magma_signal_semaphore(magma_semaphore_t semaphore)
{
	GET_CONTEXT;
	ctx->magma_signal_semaphore(ctx, semaphore);
}

void magma_reset_semaphore(magma_semaphore_t semaphore)
{
	GET_CONTEXT;
	ctx->magma_reset_semaphore(ctx, semaphore);
}

magma_status_t magma_poll(magma_poll_item_t* items, uint32_t count, uint64_t timeout_ns)
{
	GET_CONTEXT;
	return ctx->magma_poll(ctx, items, count, timeout_ns);
}

magma_status_t magma_get_error(magma_connection_t connection)
{
	GET_CONTEXT;
	return ctx->magma_get_error(ctx, connection);
}

magma_status_t magma_create_context(magma_connection_t connection, uint32_t* context_id_out)
{
	GET_CONTEXT;
	return ctx->magma_create_context(ctx, connection, context_id_out);
}

void magma_release_context(magma_connection_t connection, uint32_t context_id)
{
	GET_CONTEXT;
	ctx->magma_release_context(ctx, connection, context_id);
}

magma_status_t magma_map_buffer_gpu(magma_connection_t connection, magma_buffer_t buffer, uint64_t page_offset, uint64_t page_count, uint64_t gpu_va, uint64_t map_flags)
{
	GET_CONTEXT;
	return ctx->magma_map_buffer_gpu(ctx, connection, buffer, page_offset, page_count, gpu_va, map_flags);
}

void magma_unmap_buffer_gpu(magma_connection_t connection, magma_buffer_t buffer, uint64_t gpu_va)
{
	GET_CONTEXT;
	ctx->magma_unmap_buffer_gpu(ctx, connection, buffer, gpu_va);
}

magma_status_t magma_execute_command(magma_connection_t connection, uint32_t context_id, magma_command_descriptor* descriptor)
{
	GET_CONTEXT;
	return ctx->magma_execute_command(ctx, connection, context_id, descriptor);
}

magma_handle_t magma_get_notification_channel_handle(magma_connection_t connection)
{
	GET_CONTEXT;
	return ctx->magma_get_notification_channel_handle(ctx, connection);
}

magma_status_t magma_read_notification_channel2(magma_connection_t connection, void* buffer, uint64_t buffer_size, uint64_t* buffer_size_out, magma_bool_t* more_data_out)
{
	GET_CONTEXT;
	return ctx->magma_read_notification_channel2(ctx, connection, buffer, buffer_size, buffer_size_out, more_data_out);
}

